#!/usr/bin/perl

#
# Copyright 2002, 2009 Seanodes Ltd http://www.seanodes.com. All rights
# reserved and protected by French, UK, U.S. and other countries' copyright laws.
# This file is part of Exanodes project and is subject to the terms
# and conditions defined in the LICENSE file which is present in the root
# directory of the project.
#

use strict;
use warnings;

use File::Basename;

my $self = basename($0);

my $type_file;

#
# Get the header file where Examsg message type enum is defined.
#
if (@ARGV == 1) {
    $type_file = $ARGV[0];
} else {
    print STDERR "Generate the Examsg message type name table and function.\n";
    print STDERR "The generated C source file is written to stdout.\n";
    print STDERR "\n";
    print STDERR "Usage: ${self} <examsg type enum file>\n";
    exit 1;
}

if (!open(TYPE_FILE, $type_file)) {
    print STDERR "Failed opening type enum file: ${type_file}\n";
    exit 1;
}

#
# Extract enum symbols from header file.
#
my @symbols;
my $maxlen = 0;

my $in_enum = 0;
while (my $line = <TYPE_FILE>) {
    chomp($line);

    $line =~ s#/\*.*\*/##g;

    $line =~ s/^\s+//;
    $line =~ s/\s+$//;
    $line =~ s/#define.*$//;

    next if !$line;

    if ($line =~ /^typedef enum ExamsgType {$/) {
	$in_enum = 1;
	next;
    }

    next if !$in_enum;

    last if $line =~ /^} ExamsgType;$/;

    my $sym = $line;
    $sym =~ s/,$//;

    push(@symbols, $sym);

    my $len = length($sym);
    $maxlen = $len if $len > $maxlen;
}

close(TYPE_FILE);

#
# Generate the Examsg message table and function file.
#
print "/* Automatically generated by ${self}, do not edit */\n";
print "\n";

print "#include \"examsg/include/examsg.h\"\n";
print "\n";

# Table
print "static const char *examsg_type_names[] =\n";
print "  {\n";

for (my $i = 0; $i < @symbols; $i++) {
    my $sym = $symbols[$i];

    my $index = "[${sym}]";
    my $name  = "\"${sym}\"";

    printf("    %-*s = %s%s\n", $maxlen+2, $index, $name,
	$i < @symbols - 1 ? "," : "");
}

print "  };\n";

print "\n";

# Function
my $first_sym = $symbols[0];
my $last_sym = $symbols[-1];

print "const char *\n";
print "examsgTypeName(ExamsgType type)\n";
print "{\n";
print "  if (type < ${first_sym} || type > ${last_sym})\n";
print "    return NULL;\n";
print "\n";
print "  return examsg_type_names[type];\n";
print "}\n";


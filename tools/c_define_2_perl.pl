#!/usr/bin/perl

#
# Copyright 2002, 2009 Seanodes Ltd http://www.seanodes.com. All rights
# reserved and protected by French, UK, U.S. and other countries' copyright laws.
# This file is part of Exanodes project and is subject to the terms
# and conditions defined in the LICENSE file which is present in the root
# directory of the project.
#

#
# This is a utility file that tranform a regular .h include file containing mostly
# #define statements to a perl equivalent.
# This tool is specific to driveFUSION's .h names file
#
#
use strict;
use warnings;

sub usage
{
  my $HIGH = `tput bold`;
  my $NORM = `tput sgr0`;

  printf(".$HIGH Usage$NORM : c-define-2-perl <define file .h> <perl file>\n");
  printf("\tTransform the <names file .h> to a perl file in <perl file>'\n");

  printf("\n.$HIGH Exemples$NORM :\n");
  printf("$HIGH\tc-define-2-perl common/include/exa_names.h adm/new-script/exa_names.pm$NORM\n");

}

if (scalar(@ARGV) != 2) {
  print("Bad number of arguments\n");
  &usage;
  exit 1;
}

my $c_define_file = $ARGV[0];
my $perl_define_file = $ARGV[1];

# Create the package name from the perl_define_file
my @pkg = split('\.', $perl_define_file);
my $perl_package = $pkg[0];

if (!open(C_DEFINE,$c_define_file)) {
  print ("ERROR: Cannot open file $c_define_file");
  exit 1;
}

if (!open(PERL_DEFINE, "+>", $perl_define_file)) {
  print ("ERROR: Cannot open file $c_define_file for writing");
  exit 1;
}

print PERL_DEFINE "# DO NOT EDIT\n";
print PERL_DEFINE "# This file is automatically generated by" . $0 . "\n";
print PERL_DEFINE "\n";
print PERL_DEFINE "package ".$perl_package.";\n";
print PERL_DEFINE "\n";
print PERL_DEFINE "use strict;\n";
print PERL_DEFINE "use warnings;\n";
print PERL_DEFINE "\n";


while (<C_DEFINE>) {
  my @fields;
  my $line = $_;

  # Process only define statements
  next if $line !~ m/#define/;
  next if $line =~ m/NOT_IN_PERL/;

  $line =~ s/\t\t/\t/g;
  $line =~ s/\t\t/\t/g;
  $line =~ s/\n//g;
  $line =~ s#/\*.*?\*/##g;

  @fields = split(/[ \t]+/, $line);

#   print "Processing : $fields[0] * $fields[1] *\n";

  # Only defines that don't begin with an underscore, have no parameters,
  # actually have a value and that value is not a symbol (another define)
  next if $fields[0] ne "#define";
  next if $fields[1] =~ /^_/ || $fields[1] =~ /.*\(/;
  next if scalar(@fields) < 3;
  next if $fields[2] =~ /^[A-Za-z_]+/;

  if ($fields[2] =~ m/^"[A-Za-z0-9 \/]+/) {
      # Value is a string
      my @quoted = split("\"", $line);
      $fields[2] = "\"$quoted[1]\"";
  }

  my $definefield="\$$fields[1] = $fields[2]\;";
  print PERL_DEFINE "our ${definefield}";

  # If there is a comment for this define, keep it
  my @comment = split("\/\/", $line);
  if (defined $comment[1]) {
      chop $comment[1];

      # Align comments
      my $i = length($definefield);
      print PERL_DEFINE " " while $i++ < 50;

      printf (PERL_DEFINE "%s", "\#$comment[1]");
  }

  print PERL_DEFINE "\n";
}

print PERL_DEFINE "\n";
print PERL_DEFINE "# Needed to allow module load\n";
print PERL_DEFINE "1;\n";

close C_DEFINE;
close PERL_DEFINE;

exit 0;

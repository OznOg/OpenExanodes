#!/bin/bash

function usage()
{
    echo Syntax:
    echo "$0 -l executable - loads newest core generated by 'executable name'"
    echo "$0 file          - loads core"
    echo "$0 process       - attaches to process"
    echo "$0               - shows what cores are present"
    exit 1
}

if [ ! -f ~/.gdbinit ]; then
    echo set pagination off > ~/.gdbinit
    echo handle SIGPIPE nostop noprint pass >> ~/.gdbinit
fi

if [ "$1" = "-h" ]; then
    usage
fi

if [ -f "$1" ]; then
    executable=`file $1|grep core.file|sed "s/^.*'\(.*\)'/\1/"`
    if [ "$executable" = "" ]; then
        echo unknown file `file $1`
        exit 1
    fi
    exec=`which $executable 2>/dev/null`
    if [ "$exec" = "" ]; then
        echo Cannot find $executable in PATH
        exit 1
    fi
    
    echo running gdb -c $1 $exec
    gdb -c $1 $exec
    exit $?
elif [ "$1" = "-l" ]; then
    if [ "$2" = "" ]; then
        usage
    fi
    cores=`ls -t /tmp/core.* 2>/dev/null`
    if [ "$cores" != "" ]; then
        core=`ls -t /tmp/core.*|xargs file|grep "core.file.*'"$2"'$"|head -1|cut -d: -f1`
    else
        echo no core found for $2
    fi
    exec=`which $2 2>/dev/null`
    if [ "$exec" = "" ]; then
        echo Cannot find $2 in PATH
        exit 1
    fi
    echo running gdb -c $core $exec
    gdb -c $core $exec
    exit $?
elif [ "`pidof $1`" != "" ]; then
    multiple=`pidof $1|grep ' '`
    if [ "$multiple" != "" ]; then
        echo multiple matching processes found, using first.
        pid=`pidof $1|cut -d' ' -f1`
    else
        pid=`pidof $1`
    fi
    echo running gdb -p $pid
    gdb -p $pid
    exit $?
elif [ "$1" = "" ]; then
    found=0
    cores=`ls -t /tmp/core.* 2>/dev/null`
    if [ "$cores" != "" ]; then
        cores=`ls -t /tmp/core.*|xargs file|grep "core.file"|cut -d: -f1`
    fi
    for core in $cores; do
        executable=`file $core|grep core.file|sed "s/^.*'\(.*\)'/\1/"`
        if [ "`file $core|grep core.file`" != "" ]; then
            if [ $found -eq 0 ]; then
                echo Available cores:
                found=1
            fi
            printf "%-18s from %-10s at %.19s\n" "$core :" "$executable" "`stat -c %y $core`"
        fi
    done
    if [ $found -eq 0 ]; then
        echo No cores found
    fi
else
    usage
fi

